"""add notification system tables

Revision ID: 39b55ecbd958
Revises: 85f1accd00c7
Create Date: 2025-09-11 22:11:48.421581

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '39b55ecbd958'
down_revision: Union[str, None] = '85f1accd00c7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('action_url', sa.String(length=500), nullable=True),
    sa.Column('action_text', sa.String(length=100), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('read_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_notifications_event_type', 'notifications', ['event_type'], unique=False)
    op.create_index('idx_notifications_expires_at', 'notifications', ['expires_at'], unique=False)
    op.create_index('idx_notifications_user_id_created_at', 'notifications', ['user_id', 'created_at'], unique=False)
    op.create_index('idx_notifications_user_id_is_read', 'notifications', ['user_id', 'is_read'], unique=False)
    op.create_table('user_notification_preferences',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('email_enabled', sa.Boolean(), nullable=False),
    sa.Column('in_app_enabled', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_notification_preferences_unique', 'user_notification_preferences', ['user_id', 'event_type'], unique=True)
    op.create_index('idx_user_notification_preferences_user_id', 'user_notification_preferences', ['user_id'], unique=False)
    op.create_table('email_notification_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notification_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('email_address', sa.String(length=320), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('subject', sa.String(length=200), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('provider_message_id', sa.String(length=255), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('bounced_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['notification_id'], ['notifications.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_email_notification_logs_event_type', 'email_notification_logs', ['event_type'], unique=False)
    op.create_index('idx_email_notification_logs_notification_id', 'email_notification_logs', ['notification_id'], unique=False)
    op.create_index('idx_email_notification_logs_status', 'email_notification_logs', ['status'], unique=False)
    op.create_index('idx_email_notification_logs_user_id_created_at', 'email_notification_logs', ['user_id', 'created_at'], unique=False)
    op.alter_column('agents', 'visibility_scope',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               existing_nullable=False,
               existing_server_default=sa.text("'personal'::text"))
    op.drop_index(op.f('idx_agents_org_scope'), table_name='agents')
    op.drop_index(op.f('idx_agents_owner_user_id'), table_name='agents')
    op.drop_index(op.f('uq_agents_org_lower_name'), table_name='agents', postgresql_where="(visibility_scope = 'organization'::text)")
    op.drop_index(op.f('uq_agents_personal_lower_name'), table_name='agents', postgresql_where="(visibility_scope = 'personal'::text)")
    op.drop_index(op.f('uq_agents_public_lower_name'), table_name='agents', postgresql_where="(visibility_scope = 'public'::text)")
    op.alter_column('keywords', 'visibility_scope',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               existing_nullable=False,
               existing_server_default=sa.text("'personal'::text"))
    op.drop_index(op.f('uq_keywords_org_lower_text'), table_name='keywords', postgresql_where="(visibility_scope = 'organization'::text)")
    op.drop_index(op.f('uq_keywords_personal_lower_text'), table_name='keywords', postgresql_where="(visibility_scope = 'personal'::text)")
    op.drop_index(op.f('uq_keywords_public_lower_text'), table_name='keywords', postgresql_where="(visibility_scope = 'public'::text)")
    op.alter_column('memory_blocks', 'visibility_scope',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               existing_nullable=False,
               existing_server_default=sa.text("'personal'::text"))
    op.drop_index(op.f('idx_memory_blocks_content_gin'), table_name='memory_blocks', postgresql_using='gin')
    op.drop_index(op.f('idx_memory_blocks_lessons_gin'), table_name='memory_blocks', postgresql_using='gin')
    op.drop_index(op.f('idx_memory_blocks_search_vector'), table_name='memory_blocks', postgresql_using='gin')
    op.drop_index(op.f('uq_organization_invitations_organization_id_email_pending'), table_name='organization_invitations', postgresql_where="(status = 'pending'::text)")
    op.alter_column('organization_memberships', 'role',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_constraint(op.f('organization_memberships_user_id_fkey'), 'organization_memberships', type_='foreignkey')
    op.drop_constraint(op.f('organization_memberships_organization_id_fkey'), 'organization_memberships', type_='foreignkey')
    op.create_foreign_key(
        op.f('organization_memberships_organization_id_fkey'),
        'organization_memberships',
        'organizations',
        ['organization_id'],
        ['id'],
    )
    op.create_foreign_key(
        op.f('organization_memberships_user_id_fkey'),
        'organization_memberships',
        'users',
        ['user_id'],
        ['id'],
    )
    op.alter_column('organizations', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('organizations', 'slug',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'display_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('users', 'auth_provider',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('users', 'external_subject',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_constraint(op.f('uq_users_email'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('uq_users_email'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.alter_column('users', 'external_subject',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'auth_provider',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'display_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('organizations', 'slug',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('organizations', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(op.f('organization_memberships_user_id_fkey'), 'organization_memberships', type_='foreignkey')
    op.drop_constraint(op.f('organization_memberships_organization_id_fkey'), 'organization_memberships', type_='foreignkey')
    op.create_foreign_key(op.f('organization_memberships_organization_id_fkey'), 'organization_memberships', 'organizations', ['organization_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('organization_memberships_user_id_fkey'), 'organization_memberships', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('organization_memberships', 'role',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_index(op.f('uq_organization_invitations_organization_id_email_pending'), 'organization_invitations', ['organization_id', 'email'], unique=True, postgresql_where="(status = 'pending'::text)")
    op.create_index(op.f('idx_memory_blocks_search_vector'), 'memory_blocks', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_memory_blocks_lessons_gin'), 'memory_blocks', [sa.literal_column("to_tsvector('english'::regconfig, lessons_learned)")], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_memory_blocks_content_gin'), 'memory_blocks', [sa.literal_column("to_tsvector('english'::regconfig, content)")], unique=False, postgresql_using='gin')
    op.alter_column('memory_blocks', 'visibility_scope',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text("'personal'::text"))
    op.create_index(op.f('uq_keywords_public_lower_text'), 'keywords', [sa.literal_column('lower(keyword_text::text)')], unique=True, postgresql_where="(visibility_scope = 'public'::text)")
    op.create_index(op.f('uq_keywords_personal_lower_text'), 'keywords', ['owner_user_id', sa.literal_column('lower(keyword_text::text)')], unique=True, postgresql_where="(visibility_scope = 'personal'::text)")
    op.create_index(op.f('uq_keywords_org_lower_text'), 'keywords', ['organization_id', sa.literal_column('lower(keyword_text::text)')], unique=True, postgresql_where="(visibility_scope = 'organization'::text)")
    op.alter_column('keywords', 'visibility_scope',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text("'personal'::text"))
    op.create_index(op.f('uq_agents_public_lower_name'), 'agents', [sa.literal_column('lower(agent_name::text)')], unique=True, postgresql_where="(visibility_scope = 'public'::text)")
    op.create_index(op.f('uq_agents_personal_lower_name'), 'agents', ['owner_user_id', sa.literal_column('lower(agent_name::text)')], unique=True, postgresql_where="(visibility_scope = 'personal'::text)")
    op.create_index(op.f('uq_agents_org_lower_name'), 'agents', ['organization_id', sa.literal_column('lower(agent_name::text)')], unique=True, postgresql_where="(visibility_scope = 'organization'::text)")
    op.create_index(op.f('idx_agents_owner_user_id'), 'agents', ['owner_user_id'], unique=False)
    op.create_index(op.f('idx_agents_org_scope'), 'agents', ['organization_id', 'visibility_scope'], unique=False)
    op.alter_column('agents', 'visibility_scope',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text("'personal'::text"))
    op.drop_index('idx_email_notification_logs_user_id_created_at', table_name='email_notification_logs')
    op.drop_index('idx_email_notification_logs_status', table_name='email_notification_logs')
    op.drop_index('idx_email_notification_logs_notification_id', table_name='email_notification_logs')
    op.drop_index('idx_email_notification_logs_event_type', table_name='email_notification_logs')
    op.drop_table('email_notification_logs')
    op.drop_index('idx_user_notification_preferences_user_id', table_name='user_notification_preferences')
    op.drop_index('idx_user_notification_preferences_unique', table_name='user_notification_preferences')
    op.drop_table('user_notification_preferences')
    op.drop_index('idx_notifications_user_id_is_read', table_name='notifications')
    op.drop_index('idx_notifications_user_id_created_at', table_name='notifications')
    op.drop_index('idx_notifications_expires_at', table_name='notifications')
    op.drop_index('idx_notifications_event_type', table_name='notifications')
    op.drop_table('notifications')
    # ### end Alembic commands ###
