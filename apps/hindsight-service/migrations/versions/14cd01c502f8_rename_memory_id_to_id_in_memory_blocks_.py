"""Rename memory_id to id in memory_blocks table

Revision ID: 14cd01c502f8
Revises: 225790e00d26
Create Date: 2025-06-07 13:35:02.709665

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # Import postgresql for UUID type

# revision identifiers, used by Alembic.
revision: str = '14cd01c502f8'
down_revision: Union[str, None] = '225790e00d26'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Rename memory_id to id, guarding for fresh DBs."""
    bind = op.get_bind()

    # Check if memory_blocks.memory_id exists
    memory_id_exists = bind.execute(
        sa.text(
            """
            SELECT 1 FROM information_schema.columns
            WHERE table_name = 'memory_blocks' AND column_name = 'memory_id'
            """
        )
    ).first() is not None

    if not memory_id_exists:
        # Already renamed or created with 'id'; nothing to do
        return

    # Drop foreign key constraints if the tables exist
    def table_exists(name: str) -> bool:
        return bind.execute(
            sa.text("SELECT to_regclass(:n) IS NOT NULL"), {"n": name}
        ).scalar()

    if table_exists('feedback_logs'):
        try:
            op.drop_constraint('feedback_logs_memory_id_fkey', 'feedback_logs', type_='foreignkey')
        except Exception:
            pass
    if table_exists('memory_block_keywords'):
        try:
            op.drop_constraint('memory_block_keywords_memory_id_fkey', 'memory_block_keywords', type_='foreignkey')
        except Exception:
            pass

    # Rename the column in memory_blocks
    op.alter_column(
        'memory_blocks',
        'memory_id',
        new_column_name='id',
        existing_type=postgresql.UUID(as_uuid=True),
        type_=postgresql.UUID(as_uuid=True),
        nullable=False,
        existing_nullable=False,
        postgresql_using='memory_id::uuid',
    )

    # Recreate foreign key constraints referencing the new 'id' column
    if table_exists('feedback_logs'):
        op.create_foreign_key(
            op.f('feedback_logs_memory_id_fkey'),
            'feedback_logs',
            'memory_blocks',
            ['memory_id'],
            ['id'],
        )
    if table_exists('memory_block_keywords'):
        op.create_foreign_key(
            op.f('memory_block_keywords_memory_id_fkey'),
            'memory_block_keywords',
            'memory_blocks',
            ['memory_id'],
            ['id'],
        )


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop foreign key constraints first (referencing 'id')
    op.drop_constraint(op.f('feedback_logs_memory_id_fkey'), 'feedback_logs', type_='foreignkey')
    op.drop_constraint(op.f('memory_block_keywords_memory_id_fkey'), 'memory_block_keywords', type_='foreignkey')

    # Rename the column back to 'memory_id'
    op.alter_column('memory_blocks', 'id', new_column_name='memory_id',
                    existing_type=postgresql.UUID(as_uuid=True),
                    type_=postgresql.UUID(as_uuid=True), # Added type_ parameter
                    nullable=False,
                    existing_nullable=False,
                    postgresql_using='id::uuid')

    # Recreate foreign key constraints referencing the original 'memory_id' column
    op.create_foreign_key(op.f('feedback_logs_memory_id_fkey'), 'feedback_logs', 'memory_blocks', ['memory_id'], ['memory_id'])
    op.create_foreign_key(op.f('memory_block_keywords_memory_id_fkey'), 'memory_block_keywords', 'memory_blocks', ['memory_id'], ['memory_id'])
    # ### end Alembic commands ###
