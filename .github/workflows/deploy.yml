name: Build, Push, and Deploy Hindsight AI to K3s

on:
  push:
    branches: [ main ] # Triggers the workflow on every push to the main branch

jobs:
  # --- JOB 1: Build and Push Hindsight Service Docker Image ---
  build-and-push-hindsight-service:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Permission needed to push images to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Automatically generated by GitHub

      - name: Build and push Hindsight Service Docker image
        id: build-push-service
        uses: docker/build-push-action@v5
        with:
          context: apps/hindsight-service # Context is the hindsight-service directory
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/hindsight-service:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/hindsight-service:latest
          file: apps/hindsight-service/Dockerfile # Specify the Dockerfile path

  # --- JOB 2: Build and Push Hindsight Dashboard Docker Image ---
  build-and-push-hindsight-dashboard:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Hindsight Dashboard Docker image
        id: build-push-dashboard
        uses: docker/build-push-action@v5
        with:
          context: apps/hindsight-dashboard # Context is the hindsight-dashboard directory
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/hindsight-dashboard:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/hindsight-dashboard:latest
          file: apps/hindsight-dashboard/Dockerfile # Specify the Dockerfile path
          build-args: |
            REACT_APP_HINDSIGHT_SERVICE_API_URL=https://api.hindsight-ai.com

  # --- JOB 3: Deploy Images to K3s Server ---
  deploy:
    needs: [build-and-push-hindsight-service, build-and-push-hindsight-dashboard] # Waits for both build jobs to complete
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Connection successful, deployment in progress..."
            
            # Define a temporary directory for cloning the repository
            REPO_DIR="/tmp/${{ github.repository }}"
            
            # Clean up previous clone if it exists
            if [ -d "$REPO_DIR" ]; then
              echo "Removing existing repository clone at $REPO_DIR"
              rm -rf "$REPO_DIR"
            fi
            
            # Clone the repository to access k8s manifests
            echo "Cloning repository ${{ github.repository }} into $REPO_DIR"
            # Use HTTPS with GITHUB_TOKEN for authentication
            git clone https://github.com/${{ github.repository }}.git "$REPO_DIR"
            
            # Navigate to the cloned repository
            cd "$REPO_DIR"
            
            # Install Traefik Resource Definitions and RBAC for Traefik
            echo "Applying Traefik CRDs..."
            # Apply CRDs
            sudo kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.11/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml

            # Wait for all required CRDs to be established
            echo "Waiting for Traefik CRDs to be established..."
            for crd in \
              middlewares.traefik.containo.us \
              ingressroutes.traefik.containo.us \
              middlewaretcps.traefik.containo.us \
              traefikservices.traefik.containo.us \
              tlsoptions.traefik.containo.us \
              tlsstores.traefik.containo.us; do
              sudo kubectl wait --for=condition=established crd/$crd --timeout=60s
            done
            
            # Replace placeholder in k8s manifests with actual GitHub username
            echo "Replacing YOUR_GITHUB_USERNAME placeholder in k8s manifests..."
            sed -i "s/YOUR_GITHUB_USERNAME/${{ github.repository_owner }}/g" k8s/*.yaml
            
            # Create image pull secret for GitHub Container Registry
            echo "Creating image pull secret for GitHub Container Registry..."
            sudo kubectl create secret docker-registry ghcr-login-secret \
              --docker-server=ghcr.io \
              --docker-username=${{ github.actor }} \
              --docker-password=${{ secrets.GHCR_PAT }} \
              --dry-run=client -o yaml | sudo kubectl apply -f -
            
            # Create TLS secret from GitHub Secrets
            echo "Creating TLS secret from GitHub Secrets..."
            sudo kubectl create secret generic hindsight-tls-secret \
              --from-literal=tls.crt="${{ secrets.TLS_CRT }}" \
              --from-literal=tls.key="${{ secrets.TLS_KEY }}" \
              --type=kubernetes.io/tls \
              --dry-run=client -o yaml | sudo kubectl apply -f -
            echo "TLS secret created."

            # Create oauth2-proxy secret from GitHub Secrets
            echo "Creating oauth2-proxy secret from GitHub Secrets..."
            # Use printf and --from-env-file=/dev/stdin for robustness
            printf "OAUTH2_PROXY_CLIENT_ID=%s\nOAUTH2_PROXY_CLIENT_SECRET=%s\nOAUTH2_PROXY_COOKIE_SECRET=%s" \
              "${{ secrets.OAUTH2_PROXY_CLIENT_ID }}" \
              "${{ secrets.OAUTH2_PROXY_CLIENT_SECRET }}" \
              "${{ secrets.OAUTH2_PROXY_COOKIE_SECRET }}" \
              | sudo kubectl create secret generic oauth2-proxy-secret --from-env-file=/dev/stdin --dry-run=client -o yaml | sudo kubectl apply -f -
            echo "oauth2-proxy secret created."

            # Create hindsight-secrets secret from GitHub Secrets
            echo "Creating hindsight-secrets secret from GitHub Secrets..."
            printf "LLM_API_KEY=%s" \
              "${{ secrets.LLM_API_KEY }}" \
              | sudo kubectl create secret generic hindsight-secrets --from-env-file=/dev/stdin --dry-run=client -o yaml | sudo kubectl apply -f -
            echo "hindsight-secrets secret created."

            # Apply oauth2-proxy deployment
            echo "Applying oauth2-proxy deployment..."
            sudo kubectl apply -f k8s/oauth2-proxy-deployment.yaml
            
            # Apply oauth2-proxy middleware after CRD is established
            echo "Applying oauth2-proxy middleware..."
            test -f k8s/oauth2-proxy-middleware.yaml && echo "Middleware file found" || echo "Middleware file missing"
            sudo kubectl apply -f k8s/oauth2-proxy-middleware.yaml
            sudo kubectl apply -f k8s/redirect-to-https-middleware.yaml

            # Apply all other Kubernetes manifests in the k8s directory, excluding secrets and oauth2-proxy files
            echo "Applying other Kubernetes manifests from $REPO_DIR/k8s/..."
            find k8s/ -name "*.yaml" \
              ! -name "hindsight-tls-secret.yaml" \
              ! -name "oauth2-proxy-secret.yaml" \
              ! -name "oauth2-proxy-deployment.yaml" \
              ! -name "oauth2-proxy-middleware.yaml" \
              -exec sudo kubectl apply -f {} \;

            # Copy backup/restore scripts to a common location and make them executable
            echo "Copying backup and restore scripts to /usr/local/bin/"
            sudo cp "$REPO_DIR"/infra/scripts/backup-script-for-k8s.sh /usr/local/bin/hindsight-db-backup.sh
            sudo cp "$REPO_DIR"/infra/scripts/restore-script-for-k8s.sh /usr/local/bin/hindsight-db-restore.sh
            sudo chmod +x /usr/local/bin/hindsight-db-backup.sh
            sudo chmod +x /usr/local/bin/hindsight-db-restore.sh
            echo "Scripts copied and made executable."

            # Add cronjob to run the backup script hourly
            echo "Adding hourly backup cronjob..."
            (crontab -l 2>/dev/null; echo "0 * * * * /usr/local/bin/hindsight-db-backup.sh >> /var/log/hindsight-db-backup.log 2>&1") | crontab -
            echo "Hourly backup cronjob added."
            
            # Update the image of the hindsight-service deployment
            echo "Updating hindsight-service deployment image"
            sudo kubectl set image deployment/hindsight-service-deployment hindsight-service=ghcr.io/${{ github.repository_owner }}/hindsight-service:latest
            
            # Update the image of the hindsight-dashboard deployment
            echo "Updating hindsight-dashboard deployment image"
            sudo kubectl set image deployment/hindsight-dashboard-deployment hindsight-dashboard=ghcr.io/${{ github.repository_owner }}/hindsight-dashboard:latest
            
            echo "Triggering rollout restart for deployments..."
            sudo kubectl rollout restart deployment/hindsight-service-deployment
            sudo kubectl rollout restart deployment/hindsight-dashboard-deployment
            
            echo "Deployment commands executed."
            
            # Clean up the cloned repository
            echo "Cleaning up cloned repository at $REPO_DIR"
            cd - # Go back to the previous directory
            rm -rf "$REPO_DIR"
            
            echo "Deployment completed!"
