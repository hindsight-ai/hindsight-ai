name: Deploy Hindsight AI with Docker Compose

on:
  push:
    branches: [ main, feat/docker-compose-deployment ]
  workflow_dispatch:
    inputs:
      recreate_acme_json:
        description: 'Recreate acme.json for Let''s Encrypt'
        required: true
        type: boolean
        default: false

jobs:
  build-and-push-hindsight-service:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Hindsight Service Docker image
        id: build-push-service
        uses: docker/build-push-action@v5
        with:
          context: apps/hindsight-service
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/hindsight-service:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/hindsight-service:latest
          file: apps/hindsight-service/Dockerfile

  build-and-push-hindsight-dashboard:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Hindsight Dashboard Docker image
        id: build-push-dashboard
        uses: docker/build-push-action@v5
        with:
          context: apps/hindsight-dashboard
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/hindsight-dashboard:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/hindsight-dashboard:latest
          file: apps/hindsight-dashboard/Dockerfile
          build-args: |
            REACT_APP_HINDSIGHT_SERVICE_API_URL=https://api.hindsight-ai.com

  deploy:
    needs: [build-and-push-hindsight-service, build-and-push-hindsight-dashboard]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy files to remote server via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.prod.yml,config/,templates/,letsencrypt/"
          target: "~/hindsight-ai-project"

      - name: Execute deployment commands on remote server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/hindsight-ai-project

            # Create .env file
            echo "Creating .env file..."
            cat <<EOF > .env
            HINDSIGHT_SERVICE_IMAGE=ghcr.io/${{ github.repository_owner }}/hindsight-service:${{ github.sha }}
            HINDSIGHT_DASHBOARD_IMAGE=ghcr.io/${{ github.repository_owner }}/hindsight-dashboard:${{ github.sha }}
            CLOUDFLARE_DNS_EMAIL=${{ secrets.CLOUDFLARE_DNS_EMAIL }}
            CLOUDFLARE_DNS_API_TOKEN=${{ secrets.CLOUDFLARE_DNS_API_TOKEN }}
            OAUTH2_PROXY_CLIENT_ID=${{ secrets.OAUTH2_PROXY_CLIENT_ID }}
            OAUTH2_PROXY_CLIENT_SECRET=${{ secrets.OAUTH2_PROXY_CLIENT_SECRET }}
            OAUTH2_PROXY_COOKIE_SECRET='${{ secrets.OAUTH2_PROXY_COOKIE_SECRET }}'
            LLM_API_KEY=${{ secrets.LLM_API_KEY }}
            LLM_MODEL_NAME=${{ secrets.LLM_MODEL_NAME }}
            CONSOLIDATION_BATCH_SIZE=${{ secrets.CONSOLIDATION_BATCH_SIZE }}
            FALLBACK_SIMILARITY_THRESHOLD=${{ secrets.FALLBACK_SIMILARITY_THRESHOLD }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            REACT_APP_HINDSIGHT_SERVICE_API_URL=https://api.hindsight-ai.com
            EOF

            # Create authorized_emails.txt
            echo "Creating authorized_emails.txt..."
            echo "${{ secrets.AUTHORIZED_EMAILS_CONTENT }}" > authorized_emails.txt

            # Replace email placeholder in Traefik config
            echo "Replacing email placeholder..."
            sed -i 's/<email_placeholder>/${{ secrets.CLOUDFLARE_API_EMAIL }}/g' ~/hindsight-ai-project/config/traefik.yml

            # Conditionally recreate acme.json for Let's Encrypt
            if [ "${{ github.event.inputs.recreate_acme_json }}" == "true" ]; then
              echo "Recreating acme.json..."
              mkdir -p ~/hindsight-ai-project/letsencrypt
              rm -f ~/hindsight-ai-project/letsencrypt/acme.json
              touch ~/hindsight-ai-project/letsencrypt/acme.json
              chmod 600 ~/hindsight-ai-project/letsencrypt/acme.json
            else
              echo "Skipping acme.json recreation."
            fi

            # Pull new images and deploy
            echo "Pulling new images and deploying..."
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml --profile prod up -d --force-recreate
            
            # Health check with 60-second timeout
            echo "Starting health checks..."
            timeout=60
            interval=5
            elapsed=0
            
            # Check container status
            echo "Checking container status..."
            while [ $elapsed -lt $timeout ]; do
              if docker compose -f docker-compose.prod.yml ps | grep -E "(hindsight-service|hindsight-dashboard|traefik|oauth2-proxy)" | grep -q "Up"; then
                echo "‚úÖ Containers are running"
                break
              fi
              
              echo "‚è≥ Waiting for containers to start (elapsed: ${elapsed}s)"
              sleep $interval
              elapsed=$((elapsed + interval))
            done
            
            if [ $elapsed -ge $timeout ]; then
              echo "‚ùå Container startup timeout"
              docker compose -f docker-compose.prod.yml logs
              exit 1
            fi
            
            # Reset timer for service-specific checks
            elapsed=0
            
            # Check services using Docker exec and curl within containers
            echo "Checking service health via Docker networks..."
            
            # Check Hindsight Service via Docker exec
            echo "Checking Hindsight Service..."
            while [ $elapsed -lt $timeout ]; do
              if docker compose -f docker-compose.prod.yml exec -T hindsight-service wget -q --spider http://localhost:8000/docs 2>/dev/null; then
                echo "‚úÖ Hindsight Service is healthy"
                break
              fi
              
              echo "‚è≥ Hindsight Service not ready (elapsed: ${elapsed}s)"
              sleep $interval
              elapsed=$((elapsed + interval))
            done
            
            if [ $elapsed -ge $timeout ]; then
              echo "‚ùå Hindsight Service health check failed"
              docker compose -f docker-compose.prod.yml logs hindsight-service
              exit 1
            fi
            
            # Reset timer
            elapsed=0
            
            # Check Hindsight Dashboard via Docker exec
            echo "Checking Hindsight Dashboard..."
            while [ $elapsed -lt $timeout ]; do
              if docker compose -f docker-compose.prod.yml exec -T hindsight-dashboard wget -q --spider http://localhost:80 2>/dev/null; then
                echo "‚úÖ Hindsight Dashboard is healthy"
                break
              fi
              
              echo "‚è≥ Hindsight Dashboard not ready (elapsed: ${elapsed}s)"
              sleep $interval
              elapsed=$((elapsed + interval))
            done
            
            if [ $elapsed -ge $timeout ]; then
              echo "‚ùå Hindsight Dashboard health check failed"
              docker compose -f docker-compose.prod.yml logs hindsight-dashboard
              exit 1
            fi
            
            # Check OAuth2 Proxy via Docker exec
            echo "Checking OAuth2 Proxy..."
            elapsed=0
            while [ $elapsed -lt $timeout ]; do
              if docker compose -f docker-compose.prod.yml exec -T oauth2-proxy wget -q --spider http://localhost:4180 2>/dev/null; then
                echo "‚úÖ OAuth2 Proxy is healthy"
                break
              fi
              
              echo "‚è≥ OAuth2 Proxy not ready (elapsed: ${elapsed}s)"
              sleep $interval
              elapsed=$((elapsed + interval))
            done
            
            if [ $elapsed -ge $timeout ]; then
              echo "‚ùå OAuth2 Proxy health check failed"
              docker compose -f docker-compose.prod.yml logs oauth2-proxy
              exit 1
            fi
            
            # Check Traefik via Docker exec
            echo "Checking Traefik..."
            elapsed=0
            while [ $elapsed -lt $timeout ]; do
              if docker compose -f docker-compose.prod.yml exec -T traefik wget -q --spider http://localhost:8080/api/http/routers 2>/dev/null; then
                echo "‚úÖ Traefik is healthy"
                break
              fi
              
              echo "‚è≥ Traefik not ready (elapsed: ${elapsed}s)"
              sleep $interval
              elapsed=$((elapsed + interval))
            done
            
            if [ $elapsed -ge $timeout ]; then
              echo "‚ö†Ô∏è  Traefik health check failed (may be normal)"
            fi
            
            echo "üéâ All health checks passed! Deployment successful!"
