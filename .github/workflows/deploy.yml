name: Deploy Hindsight AI with Docker Compose

on:
  push:
    branches: [ main, feat/docker-compose-deployment ]
  workflow_dispatch:
    inputs:
      recreate_acme_json:
        description: 'Recreate acme.json for Let''s Encrypt'
        required: true
        type: boolean
        default: false

jobs:
  build-and-push-hindsight-service:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Hindsight Service Docker image
        id: build-push-service
        uses: docker/build-push-action@v5
        with:
          context: apps/hindsight-service
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/hindsight-service:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/hindsight-service:latest
          file: apps/hindsight-service/Dockerfile

  build-and-push-hindsight-dashboard:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get frontend version
        id: frontend-version
        run: |
          VERSION=$(cat apps/hindsight-dashboard/package.json | jq -r '.version')
          echo "FRONTEND_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build and push Hindsight Dashboard Docker image
        id: build-push-dashboard
        uses: docker/build-push-action@v5
        with:
          context: apps/hindsight-dashboard
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/hindsight-dashboard:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/hindsight-dashboard:latest
          file: apps/hindsight-dashboard/Dockerfile
          build-args: |
            REACT_APP_HINDSIGHT_SERVICE_API_URL=https://api.hindsight-ai.com
            REACT_APP_VERSION=${{ env.FRONTEND_VERSION }}
            REACT_APP_BUILD_SHA=${{ github.sha }}
            REACT_APP_BUILD_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            REACT_APP_DASHBOARD_IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/hindsight-dashboard:${{ github.sha }}

  deploy:
    needs: [build-and-push-hindsight-service, build-and-push-hindsight-dashboard]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy files to remote server via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.prod.yml,config/,templates/,letsencrypt/"
          target: "~/hindsight-ai-project"

      - name: Execute deployment commands on remote server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/hindsight-ai-project

            # Create .env file
            echo "Creating .env file..."
            cat <<EOF > .env
            HINDSIGHT_SERVICE_IMAGE=ghcr.io/${{ github.repository_owner }}/hindsight-service:${{ github.sha }}
            HINDSIGHT_DASHBOARD_IMAGE=ghcr.io/${{ github.repository_owner }}/hindsight-dashboard:${{ github.sha }}
            CLOUDFLARE_DNS_EMAIL=${{ secrets.CLOUDFLARE_DNS_EMAIL }}
            CLOUDFLARE_DNS_API_TOKEN=${{ secrets.CLOUDFLARE_DNS_API_TOKEN }}
            OAUTH2_PROXY_CLIENT_ID=${{ secrets.OAUTH2_PROXY_CLIENT_ID }}
            OAUTH2_PROXY_CLIENT_SECRET=${{ secrets.OAUTH2_PROXY_CLIENT_SECRET }}
            OAUTH2_PROXY_COOKIE_SECRET='${{ secrets.OAUTH2_PROXY_COOKIE_SECRET }}'
            LLM_API_KEY=${{ secrets.LLM_API_KEY }}
            LLM_MODEL_NAME=${{ secrets.LLM_MODEL_NAME }}
            CONSOLIDATION_BATCH_SIZE=${{ secrets.CONSOLIDATION_BATCH_SIZE }}
            FALLBACK_SIMILARITY_THRESHOLD=${{ secrets.FALLBACK_SIMILARITY_THRESHOLD }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            REACT_APP_HINDSIGHT_SERVICE_API_URL=https://api.hindsight-ai.com
            BACKEND_BUILD_SHA=${{ github.sha }}
            FRONTEND_BUILD_SHA=${{ github.sha }}
            BUILD_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            BACKEND_IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/hindsight-service:${{ github.sha }}
            FRONTEND_IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/hindsight-dashboard:${{ github.sha }}
            EOF

            # Create authorized_emails.txt
            echo "Creating authorized_emails.txt..."
            echo "${{ secrets.AUTHORIZED_EMAILS_CONTENT }}" > authorized_emails.txt

            # Replace email placeholder in Traefik config
            echo "Replacing email placeholder..."
            sed -i 's/<email_placeholder>/${{ secrets.CLOUDFLARE_API_EMAIL }}/g' ~/hindsight-ai-project/config/traefik.yml

            # Conditionally recreate acme.json for Let's Encrypt
            if [ "${{ github.event.inputs.recreate_acme_json }}" == "true" ]; then
              echo "Recreating acme.json..."
              mkdir -p ~/hindsight-ai-project/letsencrypt
              rm -f ~/hindsight-ai-project/letsencrypt/acme.json
              touch ~/hindsight-ai-project/letsencrypt/acme.json
              chmod 600 ~/hindsight-ai-project/letsencrypt/acme.json
            else
              echo "Skipping acme.json recreation."
            fi

            # Pull new images and deploy
            echo "Pulling new images and deploying..."
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml --profile prod up -d --force-recreate
            
            # Simple health check: wait 10 seconds and verify containers are still running
            echo "Performing simple health check - waiting 10 seconds..."
            sleep 10
            
            # Check if all containers are still running
            if docker compose -f docker-compose.prod.yml ps | grep -E "(hindsight-service|hindsight-dashboard|traefik|oauth2-proxy)" | grep -q "Up"; then
              echo "‚úÖ All containers are running and stable"
              echo "üéâ Deployment successful!"
            else
              echo "‚ùå Some containers crashed or stopped"
              echo "Container status:"
              docker compose -f docker-compose.prod.yml ps
              echo "Recent logs:"
              docker compose -f docker-compose.prod.yml logs --tail 20
              exit 1
            fi
