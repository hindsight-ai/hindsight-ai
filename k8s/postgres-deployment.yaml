apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      initContainers:
        - name: init-db-schema
          image: postgres:13 # Use a postgres client image
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Waiting for PostgreSQL to be ready (timeout 300s)..."
              TIMEOUT=30
              until pg_isready -h postgres-service -p 5432 -U user; do
                echo "PostgreSQL is unavailable - sleeping"
                sleep 2
                TIMEOUT=$((TIMEOUT-2))
                if [ $TIMEOUT -le 0 ]; then
                  echo "PostgreSQL did not become ready within the timeout period. Exiting."
                  exit 1
                fi
              done
              echo "PostgreSQL is up."

              # Check if the 'alembic_version' table exists. If not, apply the initial schema.
              # This table is created by Alembic during its first run, indicating the schema is initialized.
              if ! psql -h postgres-service -p 5432 -U user -d hindsight_db -c '\dt alembic_version' | grep -q 'alembic_version'; then
                echo "Applying initial database schema..."
                psql -h postgres-service -p 5432 -U user -d hindsight_db -f /docker-entrypoint-initdb.d/V1__initial_schema.sql
                echo "Initial database schema applied."
              else
                echo "Database schema already exists, skipping initial application."
              fi
          env:
            - name: PGPASSWORD
              value: "password" # Use PGPASSWORD for psql command
            - name: PGUSER
              value: "user"
            - name: PGDATABASE
              value: "hindsight_db"
            - name: PGHOST
              value: "postgres-service" # Connect to the postgres service
            - name: PGPORT
              value: "5432"
          volumeMounts:
            - name: initial-schema-volume
              mountPath: /docker-entrypoint-initdb.d/ # Standard path for init scripts in postgres image
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "hindsight_db"
            - name: POSTGRES_USER
              value: "user"
            - name: POSTGRES_PASSWORD
              value: "password"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: initial-schema-volume
          configMap:
            name: postgres-initial-schema
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi # Adjust storage size as needed
